// Code generated by go-bindata.
// sources:
// test/e2e/manifests/hostpath.yaml
// DO NOT EDIT!

package e2e

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _hostpathYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x55\x41\x6b\x1b\x3d\x10\xbd\xef\xaf\x98\x43\x0e\xf9\x0e\xb6\xe3\xc0\x57\x8a\x20\x87\xc6\x76\xc1\x94\x38\x4b\x9c\xe4\x1a\x94\xd5\x78\x3d\x58\xab\x51\xa5\xd9\x6d\xf6\xdf\x17\xd9\xd9\xcd\x3a\x86\x96\x42\xe9\xa1\xd4\xe0\x83\x66\x46\xf3\x34\xef\x3d\xad\xb4\xa7\x47\x0c\x91\xd8\x29\x28\x22\x99\x40\x0d\x86\x71\x14\x0e\xba\xc4\x31\x7b\x74\x71\x4b\x1b\x19\x13\x4f\x9a\xa9\xb6\x7e\xab\xa7\xd9\x8e\x9c\x51\x30\x5b\x2f\xe7\xfb\xea\x39\x7a\xcb\x6d\x85\x4e\xb2\x0a\x45\x1b\x2d\x5a\x65\x00\x4e\x57\xa8\x60\xcb\x51\xbc\x96\x6d\x16\x3d\x16\x29\x7c\x40\x58\xed\x93\x45\xa4\x51\x5f\xd0\xe7\x66\xec\x24\xb0\xb5\x18\xee\xb1\xf2\x56\x0b\xa6\x7d\x00\x5d\x87\xf4\x2b\xd8\x89\x26\x87\x21\x76\x91\x11\xe8\x50\xf6\xab\xb4\x1e\x8d\x9a\xab\xff\x8f\xd6\xe8\x8c\x67\x72\x72\x75\x76\x3e\x5b\x2f\x9f\x16\xab\x79\x7e\xbb\x5c\xdd\xff\x77\x54\xe4\xd8\x20\x99\xab\xb3\xf3\x2f\x0f\xd7\x8b\xa7\xd5\xed\x7c\xf1\xb4\xfa\x74\xb3\x78\x2b\x42\xd7\x0c\x61\x0e\x73\x0e\xfb\xf5\x49\x80\x46\xdb\x1a\x15\xd4\x8e\x5e\xd4\x64\x32\x29\x22\xa5\xff\x38\x72\xb1\x3b\x69\x71\x8c\xf7\xbe\xc9\xe7\xc0\x95\x1a\x04\x01\x36\x84\xd6\xdc\xe1\xe6\x38\x0a\x30\x94\xb4\x99\xbe\x4b\xee\x37\xe5\x5a\xb6\x6a\xcf\xe7\x38\x4d\x9b\xc4\xe8\xcb\xa8\xd2\x25\x2a\xf8\x5a\xeb\x36\x89\xbe\xfb\x18\xd3\xa1\x3b\x95\xbc\xad\x4b\x72\xaa\xb9\x18\x5f\x8e\x2f\x8e\xf7\xe4\xb5\xb5\x39\x5b\x2a\x5a\x05\xcb\xcd\x8a\x25\x0f\x18\x93\x29\xba\x2a\xd7\x6b\x7e\xd0\xb9\x4f\x34\x6c\xeb\x0a\x6f\xb8\x76\x12\x4f\x99\xed\xa0\x47\x81\x59\x06\xd3\x54\xa9\xfe\x30\xc9\x44\x2a\xdf\x67\x22\x16\x75\x20\x69\x93\x8d\xf0\x45\x86\xec\xf8\x40\x0d\x59\x2c\xd1\x28\x90\x50\x77\x43\x1f\xf0\x07\x4e\xfa\x11\x70\x8a\xee\x51\x87\x7d\x4f\x4f\x01\x20\xad\x47\x05\x73\x0a\x58\x08\x87\xf6\xcd\xdf\x39\x86\x15\x1b\xfc\x67\xee\xb7\x26\x7f\xb1\xb9\x7f\xdd\x8e\xbf\xf7\x42\xfc\x61\x73\xaf\xb9\xd8\xa1\x28\x78\xef\x86\x24\xc5\x83\x37\x5a\x70\x2d\x41\x0b\x96\xad\x82\x3b\xb6\x96\x5c\x99\x25\x26\xf8\x19\x73\x0c\xc4\x66\x8d\x05\x3b\x13\x15\x7c\xb8\x48\x5d\x5f\x5f\xa2\x99\xd5\x31\x76\x37\xe6\x75\x98\x11\x0c\x9f\x9b\xa1\x0c\xb1\xe8\x9c\x61\x70\xa3\x6b\x2b\x47\xfc\x06\x2c\xac\xa6\xaa\x93\x73\x8e\x16\xa5\xcb\x69\x6b\xf9\xdb\xe3\x9e\xb2\xc5\x8b\xd7\xee\x60\xb4\x93\x6f\xc5\x35\x39\x43\xae\xbc\x61\x83\x0a\x96\x55\x85\x86\xb4\x60\xf6\xd3\x63\x5d\x66\x1d\xa7\x41\x57\x28\x83\x1b\x0e\xb0\x61\x9e\x2a\x78\xd6\x61\x9a\x7d\x0f\x00\x00\xff\xff\x3b\x29\x35\xcf\x95\x07\x00\x00")

func hostpathYamlBytes() ([]byte, error) {
	return bindataRead(
		_hostpathYaml,
		"hostpath.yaml",
	)
}

func hostpathYaml() (*asset, error) {
	bytes, err := hostpathYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hostpath.yaml", size: 1941, mode: os.FileMode(436), modTime: time.Unix(1542874535, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hostpath.yaml": hostpathYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"hostpath.yaml": {hostpathYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
